#usda 1.0
(
    defaultPrim = "SpriteDemo"
    doc = "Maxellabs 3D引擎 - 2D精灵动画示例"
    metersPerUnit = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
    customLayerData = {
        string creator = "Maxellabs Team"
        string version = "1.0.0"
        string[] tags = ["sprites", "2d", "animation", "atlas"]
        dictionary maxellabs = {
            string engineVersion = "1.0.0"
            string renderPipeline = "forward"
            string blendMode = "normal"
            string spriteType = "2d-sprites"
        }
    }
)

def Scope "SpriteDemo" (
    kind = "assembly"
    doc = "2D精灵动画演示"
)
{
    # 精灵演示边界框
    float3 extent = [(-20, -10, 0), (20, 10, 1)]
    
    # Maxellabs 精灵扩展
    custom string maxellabs:spriteType = "2d-sprites"
    custom bool maxellabs:visible = true
    custom string maxellabs:blendMode = "normal"
    
    def Scope "Characters"
    {
        def "Player" (
            references = @./sprites/character.usda@
        )
        {
            # 精灵基础属性
            custom string maxellabs:sprite:atlasPath = "./textures/character_atlas.png"
            custom string maxellabs:sprite:currentAnimation = "idle"
            custom int maxellabs:sprite:currentFrame = 0
            custom bool maxellabs:sprite:playing = true
            custom bool maxellabs:sprite:loop = true
            custom float maxellabs:sprite:frameRate = 12.0
            
            # 位置和变换
            double3 xformOp:translate = (-8, 0, 0)
            double3 xformOp:scale = (2, 2, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 图集配置
            custom int2 maxellabs:sprite:atlas:size = (512, 512)
            custom int2 maxellabs:sprite:atlas:frameSize = (64, 64)
            custom int maxellabs:sprite:atlas:framesPerRow = 8
            custom string maxellabs:sprite:atlas:format = "png"
            
            # 动画定义
            custom string[] maxellabs:sprite:animations:idle:frames = ["idle_0", "idle_1", "idle_2", "idle_3"]
            custom int[] maxellabs:sprite:animations:idle:frameIndices = [0, 1, 2, 3]
            custom float maxellabs:sprite:animations:idle:duration = 1.0
            custom bool maxellabs:sprite:animations:idle:loop = true
            
            custom string[] maxellabs:sprite:animations:walk:frames = ["walk_0", "walk_1", "walk_2", "walk_3", "walk_4", "walk_5"]
            custom int[] maxellabs:sprite:animations:walk:frameIndices = [8, 9, 10, 11, 12, 13]
            custom float maxellabs:sprite:animations:walk:duration = 0.6
            custom bool maxellabs:sprite:animations:walk:loop = true
            
            custom string[] maxellabs:sprite:animations:jump:frames = ["jump_0", "jump_1", "jump_2"]
            custom int[] maxellabs:sprite:animations:jump:frameIndices = [16, 17, 18]
            custom float maxellabs:sprite:animations:jump:duration = 0.5
            custom bool maxellabs:sprite:animations:jump:loop = false
            
            # 帧数据
            custom float4[] maxellabs:sprite:frames:uvs = [
                (0.0, 0.0, 0.125, 0.125),     # idle_0
                (0.125, 0.0, 0.25, 0.125),    # idle_1
                (0.25, 0.0, 0.375, 0.125),    # idle_2
                (0.375, 0.0, 0.5, 0.125),     # idle_3
                (0.0, 0.125, 0.125, 0.25),    # walk_0
                (0.125, 0.125, 0.25, 0.25),   # walk_1
                (0.25, 0.125, 0.375, 0.25),   # walk_2
                (0.375, 0.125, 0.5, 0.25),    # walk_3
                (0.5, 0.125, 0.625, 0.25),    # walk_4
                (0.625, 0.125, 0.75, 0.25),   # walk_5
                (0.0, 0.25, 0.125, 0.375),    # jump_0
                (0.125, 0.25, 0.25, 0.375),   # jump_1
                (0.25, 0.25, 0.375, 0.375)    # jump_2
            ]
            
            # 渲染属性
            custom bool maxellabs:sprite:billboard = true
            custom string maxellabs:sprite:alignment = "center"
            custom bool maxellabs:sprite:pixelPerfect = true
            custom int maxellabs:sprite:pixelsPerUnit = 100
            
            # 材质绑定
            rel material:binding = </SpriteDemo/Materials/SpriteMaterial>
            
            # 交互配置
            custom bool maxellabs:interaction:enabled = true
            custom bool maxellabs:interaction:hover:enabled = true
            custom float maxellabs:interaction:hover:scaleFactor = 1.1
            
            # 动画状态机
            custom string maxellabs:sprite:stateMachine:currentState = "idle"
            custom string[] maxellabs:sprite:stateMachine:states = ["idle", "walk", "jump"]
            custom string[] maxellabs:sprite:stateMachine:transitions = [
                "idle->walk", "walk->idle", "idle->jump", "jump->idle"
            ]
        }
        
        def "Enemy" (
            references = @./sprites/enemy.usda@
        )
        {
            custom string maxellabs:sprite:atlasPath = "./textures/enemy_atlas.png"
            custom string maxellabs:sprite:currentAnimation = "patrol"
            custom bool maxellabs:sprite:playing = true
            custom float maxellabs:sprite:frameRate = 8.0
            
            double3 xformOp:translate = (8, 0, 0)
            double3 xformOp:scale = (1.5, 1.5, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 敌人动画
            custom string[] maxellabs:sprite:animations:patrol:frames = ["patrol_0", "patrol_1", "patrol_2", "patrol_3"]
            custom int[] maxellabs:sprite:animations:patrol:frameIndices = [0, 1, 2, 3]
            custom float maxellabs:sprite:animations:patrol:duration = 2.0
            custom bool maxellabs:sprite:animations:patrol:loop = true
            
            custom string[] maxellabs:sprite:animations:attack:frames = ["attack_0", "attack_1", "attack_2"]
            custom int[] maxellabs:sprite:animations:attack:frameIndices = [8, 9, 10]
            custom float maxellabs:sprite:animations:attack:duration = 0.8
            custom bool maxellabs:sprite:animations:attack:loop = false
            
            # AI行为
            custom bool maxellabs:ai:enabled = true
            custom string maxellabs:ai:behavior = "patrol"
            custom float maxellabs:ai:detectionRange = 5.0
            custom float maxellabs:ai:speed = 2.0
            
            rel material:binding = </SpriteDemo/Materials/EnemySpriteMaterial>
        }
    }
    
    def Scope "Effects"
    {
        def "Explosion"
        {
            custom string maxellabs:sprite:atlasPath = "./textures/explosion_atlas.png"
            custom string maxellabs:sprite:currentAnimation = "explode"
            custom bool maxellabs:sprite:playing = false
            custom float maxellabs:sprite:frameRate = 20.0
            
            double3 xformOp:translate = (0, 3, 0)
            double3 xformOp:scale = (3, 3, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 爆炸动画
            custom string[] maxellabs:sprite:animations:explode:frames = [
                "exp_0", "exp_1", "exp_2", "exp_3", "exp_4", "exp_5", "exp_6", "exp_7"
            ]
            custom int[] maxellabs:sprite:animations:explode:frameIndices = [0, 1, 2, 3, 4, 5, 6, 7]
            custom float maxellabs:sprite:animations:explode:duration = 0.4
            custom bool maxellabs:sprite:animations:explode:loop = false
            custom bool maxellabs:sprite:animations:explode:destroyOnComplete = true
            
            # 特效属性
            custom bool maxellabs:sprite:additive = true
            custom float maxellabs:sprite:brightness = 2.0
            custom color4f maxellabs:sprite:tint = (1, 0.8, 0.6, 1)
            
            # 音效
            custom bool maxellabs:audio:enabled = true
            custom asset maxellabs:audio:clip = @./audio/explosion.wav@
            custom float maxellabs:audio:volume = 0.8
            custom bool maxellabs:audio:spatial = true
            
            rel material:binding = </SpriteDemo/Materials/ExplosionSpriteMaterial>
        }
        
        def "PowerUp"
        {
            custom string maxellabs:sprite:atlasPath = "./textures/powerup_atlas.png"
            custom string maxellabs:sprite:currentAnimation = "spin"
            custom bool maxellabs:sprite:playing = true
            custom float maxellabs:sprite:frameRate = 15.0
            
            double3 xformOp:translate = (0, -3, 0)
            double3 xformOp:scale = (1, 1, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 旋转动画
            custom string[] maxellabs:sprite:animations:spin:frames = [
                "spin_0", "spin_1", "spin_2", "spin_3", "spin_4", "spin_5"
            ]
            custom int[] maxellabs:sprite:animations:spin:frameIndices = [0, 1, 2, 3, 4, 5]
            custom float maxellabs:sprite:animations:spin:duration = 1.0
            custom bool maxellabs:sprite:animations:spin:loop = true
            
            # 收集动画
            custom string[] maxellabs:sprite:animations:collect:frames = [
                "collect_0", "collect_1", "collect_2", "collect_3"
            ]
            custom int[] maxellabs:sprite:animations:collect:frameIndices = [8, 9, 10, 11]
            custom float maxellabs:sprite:animations:collect:duration = 0.3
            custom bool maxellabs:sprite:animations:collect:loop = false
            
            # 发光效果
            custom bool maxellabs:sprite:glow:enabled = true
            custom color4f maxellabs:sprite:glow:color = (1, 1, 0, 1)
            custom float maxellabs:sprite:glow:intensity = 1.5
            custom float maxellabs:sprite:glow:radius = 0.5
            
            # 浮动动画
            custom bool maxellabs:sprite:float:enabled = true
            custom float maxellabs:sprite:float:amplitude = 0.2
            custom float maxellabs:sprite:float:frequency = 2.0
            
            rel material:binding = </SpriteDemo/Materials/PowerUpSpriteMaterial>
        }
    }
    
    def Scope "UI"
    {
        def "HealthBar"
        {
            custom string maxellabs:sprite:atlasPath = "./textures/ui_atlas.png"
            custom string maxellabs:sprite:type = "ui"
            custom bool maxellabs:sprite:screenSpace = true
            
            double3 xformOp:translate = (-15, 8, 0)
            double3 xformOp:scale = (4, 1, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # UI精灵配置
            custom string maxellabs:ui:type = "progressBar"
            custom float maxellabs:ui:value = 0.8
            custom float maxellabs:ui:maxValue = 1.0
            custom color4f maxellabs:ui:fillColor = (0.2, 0.8, 0.2, 1)
            custom color4f maxellabs:ui:backgroundColor = (0.2, 0.2, 0.2, 0.8)
            
            # 九宫格拉伸
            custom bool maxellabs:sprite:nineSlice:enabled = true
            custom float4 maxellabs:sprite:nineSlice:borders = (8, 8, 8, 8)
            custom float2 maxellabs:sprite:nineSlice:size = (200, 20)
            
            rel material:binding = </SpriteDemo/Materials/UISpriteMaterial>
        }
        
        def "Button"
        {
            custom string maxellabs:sprite:atlasPath = "./textures/ui_atlas.png"
            custom string maxellabs:sprite:type = "ui"
            custom bool maxellabs:sprite:screenSpace = true
            custom string maxellabs:sprite:currentState = "normal"
            
            double3 xformOp:translate = (15, -8, 0)
            double3 xformOp:scale = (3, 1.5, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 按钮状态
            custom string[] maxellabs:sprite:states = ["normal", "hover", "pressed", "disabled"]
            custom int[] maxellabs:sprite:stateFrames = [0, 1, 2, 3]
            
            # 九宫格按钮
            custom bool maxellabs:sprite:nineSlice:enabled = true
            custom float4 maxellabs:sprite:nineSlice:borders = (12, 12, 12, 12)
            custom float2 maxellabs:sprite:nineSlice:size = (120, 40)
            
            # 交互配置
            custom bool maxellabs:interaction:enabled = true
            custom bool maxellabs:interaction:hover:enabled = true
            custom string maxellabs:interaction:hover:animation = "hover"
            custom bool maxellabs:interaction:click:enabled = true
            custom string maxellabs:interaction:click:animation = "pressed"
            
            # 文本标签
            custom string maxellabs:ui:text = "Click Me"
            custom string maxellabs:ui:fontFamily = "Inter"
            custom float maxellabs:ui:fontSize = 16
            custom color4f maxellabs:ui:textColor = (1, 1, 1, 1)
            custom string maxellabs:ui:textAlign = "center"
            
            rel material:binding = </SpriteDemo/Materials/ButtonSpriteMaterial>
        }
    }
    
    def Scope "Tiled"
    {
        def "Background"
        {
            custom string maxellabs:sprite:atlasPath = "./textures/tileset.png"
            custom string maxellabs:sprite:type = "tiled"
            custom bool maxellabs:sprite:tiled = true
            
            double3 xformOp:translate = (0, 0, -1)
            double3 xformOp:scale = (40, 20, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 平铺配置
            custom int2 maxellabs:sprite:tiling:repeat = (20, 10)
            custom float2 maxellabs:sprite:tiling:offset = (0, 0)
            custom float2 maxellabs:sprite:tiling:scale = (1, 1)
            custom string maxellabs:sprite:tiling:wrapMode = "repeat"
            
            # 滚动背景
            custom bool maxellabs:sprite:scroll:enabled = true
            custom float2 maxellabs:sprite:scroll:speed = (0.5, 0)
            custom bool maxellabs:sprite:scroll:infinite = true
            
            rel material:binding = </SpriteDemo/Materials/TiledSpriteMaterial>
        }
        
        def "Platform"
        {
            custom string maxellabs:sprite:atlasPath = "./textures/platform_atlas.png"
            custom string maxellabs:sprite:type = "platform"
            
            double3 xformOp:translate = (0, -5, 0)
            double3 xformOp:scale = (10, 2, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            # 平台精灵配置
            custom bool maxellabs:sprite:nineSlice:enabled = true
            custom float4 maxellabs:sprite:nineSlice:borders = (16, 16, 16, 16)
            custom float2 maxellabs:sprite:nineSlice:size = (320, 64)
            
            # 物理属性
            custom bool maxellabs:physics:enabled = true
            custom string maxellabs:physics:bodyType = "static"
            custom string maxellabs:physics:shapeType = "box"
            custom bool maxellabs:physics:isTrigger = false
            
            rel material:binding = </SpriteDemo/Materials/PlatformSpriteMaterial>
        }
    }
}

def Scope "Materials"
{
    def Material "SpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/SpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 1.0
            token outputs:surface
            
            # 纹理输入
            asset inputs:diffuseColor.connect = </SpriteDemo/Materials/SpriteMaterial/Texture.outputs:rgb>
            
            custom string maxellabs:blendMode = "normal"
            custom bool maxellabs:doubleSided = true
            custom bool maxellabs:unlit = true
            custom bool maxellabs:alphaTest = true
            custom float maxellabs:alphaCutoff = 0.1
        }
        
        def Shader "Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./textures/character_atlas.png@
            float2 inputs:st.connect = </SpriteDemo/Materials/SpriteMaterial/Primvar.outputs:result>
            token outputs:rgb
            float outputs:a
            
            custom string maxellabs:filterMode = "point"
            custom string maxellabs:wrapMode = "clamp"
        }
        
        def Shader "Primvar"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname = "st"
            float2 outputs:result
        }
    }
    
    def Material "EnemySpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/EnemySpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 0.8, 0.8)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 1.0
            token outputs:surface
            
            asset inputs:diffuseColor.connect = </SpriteDemo/Materials/EnemySpriteMaterial/Texture.outputs:rgb>
            
            custom string maxellabs:blendMode = "normal"
            custom bool maxellabs:unlit = true
        }
        
        def Shader "Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./textures/enemy_atlas.png@
            float2 inputs:st.connect = </SpriteDemo/Materials/EnemySpriteMaterial/Primvar.outputs:result>
            token outputs:rgb
            float outputs:a
        }
        
        def Shader "Primvar"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname = "st"
            float2 outputs:result
        }
    }
    
    def Material "ExplosionSpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/ExplosionSpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 0.8, 0.6)
            color3f inputs:emissiveColor = (1, 0.6, 0.2)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 1.0
            token outputs:surface
            
            asset inputs:diffuseColor.connect = </SpriteDemo/Materials/ExplosionSpriteMaterial/Texture.outputs:rgb>
            
            custom string maxellabs:blendMode = "add"
            custom bool maxellabs:unlit = true
        }
        
        def Shader "Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./textures/explosion_atlas.png@
            float2 inputs:st.connect = </SpriteDemo/Materials/ExplosionSpriteMaterial/Primvar.outputs:result>
            token outputs:rgb
            float outputs:a
        }
        
        def Shader "Primvar"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname = "st"
            float2 outputs:result
        }
    }
    
    def Material "PowerUpSpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/PowerUpSpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 0.5)
            color3f inputs:emissiveColor = (0.5, 0.5, 0)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 1.0
            token outputs:surface
            
            custom string maxellabs:blendMode = "normal"
            custom bool maxellabs:unlit = true
        }
    }
    
    def Material "UISpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/UISpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 0.9
            token outputs:surface
            
            custom string maxellabs:blendMode = "transparent"
            custom bool maxellabs:unlit = true
            custom bool maxellabs:screenSpace = true
        }
    }
    
    def Material "ButtonSpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/ButtonSpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8, 0.8, 1)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 1.0
            token outputs:surface
            
            custom string maxellabs:blendMode = "normal"
            custom bool maxellabs:unlit = true
            custom bool maxellabs:screenSpace = true
        }
    }
    
    def Material "TiledSpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/TiledSpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8, 0.9, 1)
            float inputs:metallic = 0.0
            float inputs:roughness = 1.0
            float inputs:opacity = 1.0
            token outputs:surface
            
            custom string maxellabs:blendMode = "normal"
            custom bool maxellabs:unlit = true
            custom bool maxellabs:tiled = true
        }
    }
    
    def Material "PlatformSpriteMaterial"
    {
        token outputs:surface.connect = </SpriteDemo/Materials/PlatformSpriteMaterial/Shader.outputs:surface>
        
        def Shader "Shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.6, 0.4, 0.2)
            float inputs:metallic = 0.0
            float inputs:roughness = 0.8
            float inputs:opacity = 1.0
            token outputs:surface
            
            custom string maxellabs:blendMode = "normal"
            custom bool maxellabs:unlit = false
        }
    }
}

def Scope "Lighting"
{
    def DistantLight "MainLight"
    {
        float inputs:intensity = 1.5
        color3f inputs:color = (1, 0.95, 0.8)
        float3 xformOp:rotateXYZ = (-45, 30, 0)
        uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
        
        custom bool maxellabs:castShadows = false
    }
    
    def SphereLight "AmbientLight"
    {
        float inputs:intensity = 0.6
        color3f inputs:color = (0.7, 0.8, 1.0)
        float inputs:radius = 100
    }
}

def Scope "Metadata"
{
    custom dictionary maxellabs:spriteDemo = {
        string name = "2D Sprite Animation Demo"
        string description = "展示2D精灵动画系统的各种功能"
        string version = "1.0.0"
        string[] features = ["sprites", "animation", "atlas", "ui", "tiling", "effects"]
        string targetPlatform = "web"
        string renderPipeline = "forward"
    }
    
    custom dictionary maxellabs:spriteFeatures = {
        bool frameAnimation = true
        bool spriteAtlas = true
        bool nineSlice = true
        bool tiledSprites = true
        bool uiSprites = true
        bool spriteEffects = true
        bool stateMachine = true
        bool physics = true
    }
    
    custom dictionary maxellabs:performance = {
        string qualityLevel = "high"
        bool enableSpriteBatching = true
        bool enableAtlasOptimization = true
        int maxSpriteInstances = 10000
        bool enableCulling = true
        bool enableLOD = false
    }
} 