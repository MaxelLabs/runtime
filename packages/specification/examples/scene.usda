#usda 1.0
(
    defaultPrim = "MaxellabsScene"
    doc = "Maxellabs 3D引擎 - 完整场景示例"
    metersPerUnit = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
    startTimeCode = 0
    endTimeCode = 240
    customLayerData = {
        string creator = "Maxellabs Team"
        string version = "1.0.0"
        string[] tags = ["scene", "demo", "complete", "showcase"]
        dictionary maxellabs = {
            string engineVersion = "1.0.0"
            string renderPipeline = "forward"
            string blendMode = "normal"
            string sceneType = "interactive"
        }
    }
)

def Scope "MaxellabsScene" (
    kind = "assembly"
    doc = "Maxellabs 3D引擎完整演示场景"
)
{
    # 场景边界框
    float3 extent = [(-20, -1, -20), (20, 15, 20)]
    
    # Maxellabs 场景扩展
    custom bool maxellabs:visible = true
    custom string maxellabs:blendMode = "normal"
    custom string maxellabs:sceneType = "interactive"
    
    # 环境配置
    custom bool maxellabs:environment:skybox:enabled = true
    custom asset maxellabs:environment:skybox:texture = @./textures/skybox.hdr@
    custom float maxellabs:environment:skybox:intensity = 1.0
    custom float3 maxellabs:environment:skybox:rotation = (0, 0, 0)
    
    custom bool maxellabs:environment:fog:enabled = true
    custom string maxellabs:environment:fog:type = "exponential"
    custom color3f maxellabs:environment:fog:color = (0.7, 0.8, 0.9)
    custom float maxellabs:environment:fog:density = 0.01
    custom float2 maxellabs:environment:fog:range = (10, 100)
    
    # 性能配置
    custom string maxellabs:performance:qualityLevel = "high"
    custom int maxellabs:performance:targetFPS = 60
    custom bool maxellabs:performance:adaptiveQuality = true
    custom bool maxellabs:performance:frustumCulling = true
    custom bool maxellabs:performance:occlusionCulling = false
    custom float maxellabs:performance:lodBias = 1.0
    custom float maxellabs:performance:shadowDistance = 50.0
    custom int maxellabs:performance:maxShadowCascades = 4
    
    def Scope "Geometry"
    {
        def "Triangle" (
            references = @./triangle.usda@</Triangle>
        )
        {
            double3 xformOp:translate = (-3, 1.5, 0)
            double3 xformOp:scale = (2, 2, 2)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            custom string maxellabs:category = "geometry"
            custom bool maxellabs:interactive = true
        }
        
        def Mesh "Ground" (
            references = @./primitives/plane.usda@
        )
        {
            double3 xformOp:translate = (0, 0, 0)
            double3 xformOp:rotateX = -90
            double3 xformOp:scale = (20, 20, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]
            
            rel material:binding = </MaxellabsScene/Materials/GroundMaterial>
            
            custom bool maxellabs:receiveShadows = true
            custom bool maxellabs:castShadows = false
            custom string maxellabs:category = "environment"
        }
        
        def Mesh "CenterCube"
        {
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
            point3f[] points = [(-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1), (-1, 1, -1), (1, 1, -1), (-1, -1, -1), (1, -1, -1)]
            
            double3 xformOp:translate = (0, 1, 0)
            double3 xformOp:rotateY.timeSamples = {
                0: 0,
                240: 360
            }
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateY"]
            
            rel material:binding = </MaxellabsScene/Materials/MetalMaterial>
            
            custom bool maxellabs:receiveShadows = true
            custom bool maxellabs:castShadows = true
            custom string maxellabs:category = "geometry"
            custom bool maxellabs:interactive = true
            
            # 动画配置
            custom bool maxellabs:animation:enabled = true
            custom float maxellabs:animation:duration = 10.0
            custom bool maxellabs:animation:loop = true
            custom string maxellabs:animation:easing = "linear"
        }
        
        def Sphere "Sphere"
        {
            double radius = 1
            
            double3 xformOp:translate = (3, 2, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
            
            rel material:binding = </MaxellabsScene/Materials/GlassMaterial>
            
            custom bool maxellabs:receiveShadows = true
            custom bool maxellabs:castShadows = true
            custom string maxellabs:category = "geometry"
            custom bool maxellabs:interactive = true
        }
    }
    
    def Scope "Effects"
    {
        def "FireParticles" (
            references = @./particles.usda@</FireParticles>
        )
        {
            double3 xformOp:translate = (0, 3, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
            
            custom string maxellabs:category = "effects"
            custom bool maxellabs:autoPlay = true
        }
    }
    
    def Scope "Visualization"
    {
        def "Chart3D" (
            references = @./chart.usda@</BarChart3D>
        )
        {
            double3 xformOp:translate = (8, 0, 0)
            double3 xformOp:scale = (0.8, 0.8, 0.8)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
            
            custom string maxellabs:category = "visualization"
            custom bool maxellabs:interactive = true
        }
    }
    
    def Scope "UI"
    {
        def Scope "HUD"
        {
            custom string maxellabs:uiType = "overlay"
            custom bool maxellabs:visible = true
            custom int maxellabs:renderOrder = 1000
            custom string maxellabs:blendMode = "normal"
            
            def "InfoPanel"
            {
                custom string maxellabs:text:content = "Maxellabs 3D Engine Demo"
                custom float2 maxellabs:ui:position = (100, 100)
                custom float2 maxellabs:ui:size = (300, 80)
                custom color4f maxellabs:ui:backgroundColor = (0, 0, 0, 0.7)
                custom color4f maxellabs:ui:textColor = (1, 1, 1, 1)
                custom float maxellabs:ui:fontSize = 16
                custom string maxellabs:ui:fontFamily = "Arial"
            }
            
            def "FPSCounter"
            {
                custom string maxellabs:text:content = "FPS: 60"
                custom float2 maxellabs:ui:position = (10, 10)
                custom color4f maxellabs:ui:textColor = (0, 1, 0, 1)
                custom float maxellabs:ui:fontSize = 14
                custom bool maxellabs:ui:realTimeUpdate = true
            }
        }
    }
    
    def Scope "Lighting"
    {
        def DistantLight "DirectionalLight"
        {
            float inputs:intensity = 3.0
            color3f inputs:color = (1, 0.95, 0.8)
            float3 xformOp:rotateXYZ = (-30, 45, 0)
            uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
            
            custom bool maxellabs:castShadows = true
            custom int maxellabs:shadowMapSize = 2048
            custom float4 maxellabs:shadowCamera:bounds = (-10, 10, -10, 10)
            custom float2 maxellabs:shadowCamera:range = (0.5, 50)
        }
        
        def SphereLight "AmbientLight"
        {
            float inputs:intensity = 0.5
            color3f inputs:color = (0.4, 0.4, 0.6)
            float inputs:radius = 100
        }
        
        def SphereLight "PointLight"
        {
            float inputs:intensity = 2.0
            color3f inputs:color = (1, 0.6, 0.2)
            float inputs:radius = 0.1
            
            double3 xformOp:translate = (-5, 3, 2)
            uniform token[] xformOpOrder = ["xformOp:translate"]
            
            custom float maxellabs:range = 10.0
            custom float maxellabs:decay = 2.0
            custom bool maxellabs:castShadows = false
        }
    }
    
    def Scope "Cameras"
    {
        def Camera "MainCamera"
        {
            float focalLength = 50
            float horizontalAperture = 36
            float verticalAperture = 24
            float clippingRange = (0.1, 1000)
            
            double3 xformOp:translate = (0, 5, 10)
            double3 xformOp:rotateXYZ = (-15, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
            
            custom string maxellabs:cameraType = "perspective"
            custom float maxellabs:fov = 60.0
            custom float maxellabs:exposure = 1.0
            
            # 相机控制
            custom string maxellabs:controls:type = "orbit"
            custom float3 maxellabs:controls:target = (0, 0, 0)
            custom bool maxellabs:controls:enableDamping = true
            custom float maxellabs:controls:dampingFactor = 0.05
            custom float2 maxellabs:controls:distanceRange = (2, 50)
            custom float2 maxellabs:controls:polarAngleRange = (0, 1.57)
        }
    }
    
    def Scope "Audio"
    {
        def "BackgroundMusic"
        {
            custom string maxellabs:audioType = "background"
            custom asset maxellabs:audio:source = @./audio/ambient.mp3@
            custom float maxellabs:audio:volume = 0.3
            custom bool maxellabs:audio:loop = true
            custom bool maxellabs:audio:autoPlay = true
            custom bool maxellabs:audio:spatial = false
        }
        
        def "FireSound"
        {
            custom string maxellabs:audioType = "spatial"
            custom asset maxellabs:audio:source = @./audio/fire.wav@
            custom float3 maxellabs:audio:position = (0, 3, 0)
            custom float maxellabs:audio:volume = 0.8
            custom bool maxellabs:audio:loop = true
            custom bool maxellabs:audio:autoPlay = true
            custom bool maxellabs:audio:spatial = true
            custom float maxellabs:audio:maxDistance = 10.0
            custom float maxellabs:audio:rolloffFactor = 1.0
        }
    }
    
    def Scope "Physics"
    {
        custom bool maxellabs:physics:enabled = true
        custom float3 maxellabs:physics:gravity = (0, -9.81, 0)
        custom float maxellabs:physics:timeStep = 0.016667
        custom int maxellabs:physics:iterations = 10
        
        def "GroundBody"
        {
            custom string maxellabs:physics:targetPrim = "/MaxellabsScene/Geometry/Ground"
            custom string maxellabs:physics:bodyType = "static"
            custom string maxellabs:physics:shapeType = "box"
            custom float maxellabs:physics:mass = 0.0
            custom float maxellabs:physics:friction = 0.8
            custom float maxellabs:physics:restitution = 0.2
        }
        
        def "CubeBody"
        {
            custom string maxellabs:physics:targetPrim = "/MaxellabsScene/Geometry/CenterCube"
            custom string maxellabs:physics:bodyType = "dynamic"
            custom string maxellabs:physics:shapeType = "box"
            custom float maxellabs:physics:mass = 1.0
            custom float maxellabs:physics:friction = 0.6
            custom float maxellabs:physics:restitution = 0.4
        }
        
        def "SphereBody"
        {
            custom string maxellabs:physics:targetPrim = "/MaxellabsScene/Geometry/Sphere"
            custom string maxellabs:physics:bodyType = "dynamic"
            custom string maxellabs:physics:shapeType = "sphere"
            custom float maxellabs:physics:mass = 0.5
            custom float maxellabs:physics:friction = 0.4
            custom float maxellabs:physics:restitution = 0.8
        }
    }
    
    def Scope "PostProcessing"
    {
        custom bool maxellabs:postProcessing:enabled = true
        
        def "Bloom"
        {
            custom bool maxellabs:effect:enabled = true
            custom string maxellabs:effect:type = "bloom"
            custom float maxellabs:bloom:threshold = 1.0
            custom float maxellabs:bloom:intensity = 0.5
            custom float maxellabs:bloom:radius = 0.4
        }
        
        def "ToneMapping"
        {
            custom bool maxellabs:effect:enabled = true
            custom string maxellabs:effect:type = "toneMapping"
            custom string maxellabs:toneMapping:type = "aces"
            custom float maxellabs:toneMapping:exposure = 1.0
        }
        
        def "SSAO"
        {
            custom bool maxellabs:effect:enabled = true
            custom string maxellabs:effect:type = "ssao"
            custom float maxellabs:ssao:radius = 0.5
            custom float maxellabs:ssao:intensity = 0.3
            custom float maxellabs:ssao:bias = 0.01
        }
        
        def "FXAA"
        {
            custom bool maxellabs:effect:enabled = true
            custom string maxellabs:effect:type = "fxaa"
        }
    }
    
    def Scope "Materials"
    {
        def Material "GroundMaterial"
        {
            token outputs:surface.connect = </MaxellabsScene/Materials/GroundMaterial/Shader.outputs:surface>
            
            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
                float inputs:metallic = 0.0
                float inputs:roughness = 0.8
                float inputs:opacity = 1.0
                token outputs:surface
                
                custom string maxellabs:blendMode = "normal"
                custom bool maxellabs:doubleSided = false
            }
        }
        
        def Material "MetalMaterial"
        {
            token outputs:surface.connect = </MaxellabsScene/Materials/MetalMaterial/Shader.outputs:surface>
            
            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.7, 0.7, 0.9)
                float inputs:metallic = 0.9
                float inputs:roughness = 0.1
                float inputs:opacity = 1.0
                token outputs:surface
                
                custom string maxellabs:blendMode = "normal"
                custom bool maxellabs:doubleSided = false
            }
        }
        
        def Material "GlassMaterial"
        {
            token outputs:surface.connect = </MaxellabsScene/Materials/GlassMaterial/Shader.outputs:surface>
            
            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.9, 0.9, 1.0)
                float inputs:metallic = 0.0
                float inputs:roughness = 0.0
                float inputs:opacity = 0.3
                float inputs:ior = 1.5
                token outputs:surface
                
                custom string maxellabs:blendMode = "transparent"
                custom bool maxellabs:doubleSided = true
            }
        }
    }
}

def Scope "Metadata"
{
    custom dictionary maxellabs:scene = {
        string name = "Maxellabs Demo Scene"
        string description = "完整的3D引擎功能演示场景"
        string version = "1.0.0"
        string[] features = ["geometry", "particles", "charts", "animation", "physics", "audio", "ui"]
        string targetPlatform = "web"
        string renderPipeline = "forward"
    }
    
    custom dictionary maxellabs:statistics = {
        int triangleCount = 2048
        int vertexCount = 1536
        int materialCount = 6
        int textureCount = 8
        int lightCount = 3
        int particleCount = 1000
    }
    
    custom dictionary maxellabs:optimization = {
        bool enableLOD = true
        bool enableInstancing = true
        bool enableOcclusion = false
        bool enableFrustumCulling = true
        string compressionFormat = "draco"
        float lodBias = 1.0
    }
} 